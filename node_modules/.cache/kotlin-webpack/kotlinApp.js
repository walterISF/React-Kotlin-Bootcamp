(function (_, Kotlin, $module$kotlin_react, $module$kotlin_react_dom, $module$kotlinx_html_js, $module$kotlin_extensions, $module$src_logo_bracelet_svg, $module$src_logo_charmander_svg, $module$src_logo_santa_claus_svg) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var plus = Kotlin.kotlin.collections.plus_qloxvw$;
  var Unit = Kotlin.kotlin.Unit;
  var setState = $module$kotlin_react.react.setState_kpl3tw$;
  var minus = Kotlin.kotlin.collections.minus_2ws7j4$;
  var getCallableRef = Kotlin.getCallableRef;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var RComponent_init = $module$kotlin_react.react.RComponent_init_lqgejo$;
  var RComponent = $module$kotlin_react.react.RComponent;
  var getKClass = Kotlin.getKClass;
  var InputType = $module$kotlinx_html_js.kotlinx.html.InputType;
  var set_onChangeFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onChangeFunction_pszlq2$;
  var throwCCE = Kotlin.throwCCE;
  var set_onKeyDownFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onKeyDownFunction_pszlq2$;
  var set_onClickFunction = $module$kotlinx_html_js.kotlinx.html.js.set_onClickFunction_pszlq2$;
  var requireAll = $module$kotlin_extensions.kotlinext.js.requireAll_spd3bs$;
  var render = $module$kotlin_react_dom.react.dom.render_2955dm$;
  var get_jsStyle = $module$kotlin_react_dom.react.dom.get_jsStyle_6s7ubj$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var ensureNotNull = Kotlin.ensureNotNull;
  var RComponent_init_0 = $module$kotlin_react.react.RComponent_init_8bz2yq$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var mapOf = Kotlin.kotlin.collections.mapOf_qfcya0$;
  App.prototype = Object.create(RComponent.prototype);
  App.prototype.constructor = App;
  HeaderInput.prototype = Object.create(RComponent.prototype);
  HeaderInput.prototype.constructor = HeaderInput;
  TodoList.prototype = Object.create(RComponent.prototype);
  TodoList.prototype.constructor = TodoList;
  TodoItem.prototype = Object.create(RComponent.prototype);
  TodoItem.prototype.constructor = TodoItem;
  Ticker.prototype = Object.create(RComponent.prototype);
  Ticker.prototype.constructor = Ticker;
  function App() {
    RComponent_init(this);
    this.state.todos = this.loadTodos();
  }
  App.prototype.loadTodos = function () {
    return listOf([new Todo(1.0, 'Joao do G\xE1s'), new Todo(2.0, 'Zinbabuwe')]);
  };
  function App$createTodo$lambda(closure$oldTodos, closure$todo) {
    return function ($receiver) {
      $receiver.todos = plus(closure$oldTodos, closure$todo);
      return Unit;
    };
  }
  App.prototype.createTodo_y1sgln$ = function (todo) {
    var oldTodos = this.state.todos;
    setState(this, App$createTodo$lambda(oldTodos, todo));
  };
  function App$removeTodo$lambda(closure$oldTodos, closure$todo) {
    return function ($receiver) {
      $receiver.todos = minus(closure$oldTodos, closure$todo);
      return Unit;
    };
  }
  App.prototype.removeTodo_y1sgln$ = function (todo) {
    var oldTodos = this.state.todos;
    setState(this, App$removeTodo$lambda(oldTodos, todo));
  };
  function App$updateTodo$lambda(closure$newTodos) {
    return function ($receiver) {
      $receiver.todos = closure$newTodos;
      return Unit;
    };
  }
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  App.prototype.updateTodo_y1sgln$ = function (todo) {
    var $receiver = this.state.todos;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var transform$result;
      if (todo.id === item.id) {
        transform$result = todo;
      }
       else {
        transform$result = item;
      }
      tmp$_0.call(destination, transform$result);
    }
    var newTodos = destination;
    setState(this, App$updateTodo$lambda(newTodos));
  };
  var attributesMapOf = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributesMapOf_jyasbz$;
  var SECTION_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.SECTION;
  function section$lambda(closure$classes) {
    return function (it) {
      return new SECTION_init(attributesMapOf('class', closure$classes), it);
    };
  }
  var RDOMBuilder_init = $module$kotlin_react_dom.react.dom.RDOMBuilder;
  App.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(section$lambda('todoapp'));
    headerInput($receiver_0, getCallableRef('createTodo', function ($receiver, todo) {
      return $receiver.createTodo_y1sgln$(todo), Unit;
    }.bind(null, this)));
    var $receiver_0_0 = new RDOMBuilder_init(section$lambda('main'));
    todoList($receiver_0_0, this.state.todos, getCallableRef('removeTodo', function ($receiver, todo) {
      return $receiver.removeTodo_y1sgln$(todo), Unit;
    }.bind(null, this)), getCallableRef('updateTodo', function ($receiver, todo) {
      return $receiver.updateTodo_y1sgln$(todo), Unit;
    }.bind(null, this)));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  function App$State(todos) {
    this.todos = todos;
  }
  App$State.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'State',
    interfaces: []
  };
  App.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'App',
    interfaces: [RComponent]
  };
  function app$lambda($receiver) {
    return Unit;
  }
  function app($receiver) {
    return $receiver.child_bzgiuu$(getKClass(App), app$lambda);
  }
  function HeaderInput() {
    RComponent_init(this);
  }
  function HeaderInput$componentDidMount$lambda($receiver) {
    $receiver.title = '';
    return Unit;
  }
  HeaderInput.prototype.componentDidMount = function () {
    setState(this, HeaderInput$componentDidMount$lambda);
  };
  function HeaderInput$render$lambda$lambda$lambda$lambda$lambda(closure$newValue) {
    return function ($receiver) {
      $receiver.title = closure$newValue;
      return Unit;
    };
  }
  function HeaderInput$render$lambda$lambda$lambda$lambda(this$HeaderInput) {
    return function (event) {
      var newValue = get_value(event);
      setState(this$HeaderInput, HeaderInput$render$lambda$lambda$lambda$lambda$lambda(newValue));
      return Unit;
    };
  }
  function HeaderInput$render$lambda$lambda$lambda$lambda$lambda_0($receiver) {
    $receiver.title = '';
    return Unit;
  }
  var isBlank = Kotlin.kotlin.text.isBlank_gw00vp$;
  function HeaderInput$render$lambda$lambda$lambda$lambda_0(this$HeaderInput) {
    return function (KeyEvent) {
      var tmp$;
      var key = typeof (tmp$ = KeyEvent.key) === 'string' ? tmp$ : throwCCE();
      var tmp$_0 = key === 'Enter';
      if (tmp$_0) {
        tmp$_0 = !isBlank(this$HeaderInput.state.title);
      }
      if (tmp$_0) {
        this$HeaderInput.props.createTodos(new Todo(void 0, this$HeaderInput.state.title));
        setState(this$HeaderInput, HeaderInput$render$lambda$lambda$lambda$lambda$lambda_0);
      }
      return Unit;
    };
  }
  function HeaderInput$render$lambda$lambda(this$HeaderInput) {
    return function ($receiver) {
      var this$HeaderInput_0 = this$HeaderInput;
      var $receiver_0 = $receiver.attrs;
      $receiver_0.autoFocus = true;
      $receiver_0.placeholder = translate('What needs to be done?');
      $receiver_0.value = this$HeaderInput_0.state.title;
      set_onChangeFunction($receiver_0, HeaderInput$render$lambda$lambda$lambda$lambda(this$HeaderInput_0));
      set_onKeyDownFunction($receiver_0, HeaderInput$render$lambda$lambda$lambda$lambda_0(this$HeaderInput_0));
      return Unit;
    };
  }
  var H1_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.H1;
  function h1$lambda(closure$classes) {
    return function (it) {
      return new H1_init(attributesMapOf('class', closure$classes), it);
    };
  }
  var enumEncode = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributes.enumEncode_m4whry$;
  var attributesMapOf_0 = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.attributesMapOf_alerag$;
  var INPUT_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.INPUT;
  function input$lambda(closure$type, closure$formEncType, closure$formMethod, closure$name, closure$classes) {
    return function (it) {
      return new INPUT_init(attributesMapOf_0(['type', closure$type != null ? enumEncode(closure$type) : null, 'formenctype', closure$formEncType != null ? enumEncode(closure$formEncType) : null, 'formmethod', closure$formMethod != null ? enumEncode(closure$formMethod) : null, 'name', closure$name, 'class', closure$classes]), it);
    };
  }
  var HEADER_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.HEADER;
  function header$lambda(closure$classes) {
    return function (it) {
      return new HEADER_init(attributesMapOf('class', closure$classes), it);
    };
  }
  HeaderInput.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(header$lambda('header'));
    var $receiver_0_0 = new RDOMBuilder_init(h1$lambda(null));
    $receiver_0_0.unaryPlus_pdl1vz$(translate('todos'));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    var $receiver_0_1 = new RDOMBuilder_init(input$lambda(InputType.text, null, null, null, 'new-todo'));
    HeaderInput$render$lambda$lambda(this)($receiver_0_1);
    $receiver_0.child_2usv9w$($receiver_0_1.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  function HeaderInput$Props(createTodos) {
    this.createTodos = createTodos;
  }
  HeaderInput$Props.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Props',
    interfaces: []
  };
  function HeaderInput$State(title) {
    this.title = title;
  }
  HeaderInput$State.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'State',
    interfaces: []
  };
  HeaderInput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HeaderInput',
    interfaces: [RComponent]
  };
  function headerInput$lambda(closure$createTodos) {
    return function ($receiver) {
      $receiver.attrs.createTodos = closure$createTodos;
      return Unit;
    };
  }
  function headerInput($receiver, createTodos) {
    return $receiver.child_bzgiuu$(getKClass(HeaderInput), headerInput$lambda(createTodos));
  }
  function TodoList() {
    RComponent_init(this);
  }
  var LI_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.LI;
  function li$lambda(closure$classes) {
    return function (it) {
      return new LI_init(attributesMapOf('class', closure$classes), it);
    };
  }
  var UL_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.UL;
  function ul$lambda(closure$classes) {
    return function (it) {
      return new UL_init(attributesMapOf('class', closure$classes), it);
    };
  }
  TodoList.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(ul$lambda('todo-list'));
    var $receiver_1 = this.props.todos;
    var destination = ArrayList_init(collectionSizeOrDefault($receiver_1, 10));
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = $receiver_1.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_1 = destination.add_11rb$;
      index = index + 1 | 0;
      var tmp$_2;
      if (item.completed)
        tmp$_2 = 'completed';
      else
        tmp$_2 = '';
      var classes = tmp$_2;
      var $receiver_0_0 = new RDOMBuilder_init(li$lambda(classes));
      todoItem($receiver_0_0, item, this.props.removeTodo, this.props.updateTodo);
      tmp$_1.call(destination, $receiver_0.child_2usv9w$($receiver_0_0.create()));
    }
    $receiver.child_2usv9w$($receiver_0.create());
  };
  function TodoList$Props(todos, removeTodo, updateTodo) {
    this.todos = todos;
    this.removeTodo = removeTodo;
    this.updateTodo = updateTodo;
  }
  TodoList$Props.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Props',
    interfaces: []
  };
  TodoList.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TodoList',
    interfaces: [RComponent]
  };
  function todoList$lambda(closure$todos, closure$removeTodo, closure$updateTodo) {
    return function ($receiver) {
      $receiver.attrs.todos = closure$todos;
      $receiver.attrs.removeTodo = closure$removeTodo;
      $receiver.attrs.updateTodo = closure$updateTodo;
      return Unit;
    };
  }
  function todoList($receiver, todos, removeTodo, updateTodo) {
    return $receiver.child_bzgiuu$(getKClass(TodoList), todoList$lambda(todos, removeTodo, updateTodo));
  }
  function TodoItem() {
    RComponent_init(this);
  }
  function TodoItem$render$lambda$lambda$lambda$lambda(this$TodoItem) {
    return function (event) {
      var tmp$;
      var checked = typeof (tmp$ = event.currentTarget.checked) === 'boolean' ? tmp$ : throwCCE();
      this$TodoItem.props.updateTodo(this$TodoItem.props.todo.copy_1938w9$(void 0, void 0, checked));
      return Unit;
    };
  }
  function TodoItem$render$lambda$lambda$lambda$lambda_0(this$TodoItem) {
    return function (it) {
      it != null ? (it.checked = this$TodoItem.props.todo.completed) : null;
      return Unit;
    };
  }
  function TodoItem$render$lambda$lambda(this$TodoItem) {
    return function ($receiver) {
      var this$TodoItem_0 = this$TodoItem;
      set_onChangeFunction($receiver.attrs, TodoItem$render$lambda$lambda$lambda$lambda(this$TodoItem_0));
      $receiver.ref_5ij4lk$(TodoItem$render$lambda$lambda$lambda$lambda_0(this$TodoItem_0));
      return Unit;
    };
  }
  function TodoItem$render$lambda$lambda$lambda$lambda_1(this$TodoItem) {
    return function (it) {
      this$TodoItem.props.removeTodo(this$TodoItem.props.todo);
      return Unit;
    };
  }
  function input$lambda_0(closure$type, closure$formEncType, closure$formMethod, closure$name, closure$classes) {
    return function (it) {
      return new INPUT_init(attributesMapOf_0(['type', closure$type != null ? enumEncode(closure$type) : null, 'formenctype', closure$formEncType != null ? enumEncode(closure$formEncType) : null, 'formmethod', closure$formMethod != null ? enumEncode(closure$formMethod) : null, 'name', closure$name, 'class', closure$classes]), it);
    };
  }
  var LABEL_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.LABEL;
  function label$lambda(closure$classes) {
    return function (it) {
      return new LABEL_init(attributesMapOf('class', closure$classes), it);
    };
  }
  var BUTTON_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.BUTTON;
  function button$lambda(closure$formEncType, closure$formMethod, closure$type, closure$classes) {
    return function (it) {
      return new BUTTON_init(attributesMapOf_0(['formenctype', closure$formEncType != null ? enumEncode(closure$formEncType) : null, 'formmethod', closure$formMethod != null ? enumEncode(closure$formMethod) : null, 'type', closure$type != null ? enumEncode(closure$type) : null, 'class', closure$classes]), it);
    };
  }
  var DIV_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.DIV;
  function div$lambda(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf('class', closure$classes), it);
    };
  }
  TodoItem.prototype.render_ss14n$ = function ($receiver) {
    var $receiver_0 = new RDOMBuilder_init(div$lambda('view'));
    var $receiver_0_0 = new RDOMBuilder_init(input$lambda_0(InputType.checkBox, null, null, null, 'toggle'));
    TodoItem$render$lambda$lambda(this)($receiver_0_0);
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    var $receiver_0_1 = new RDOMBuilder_init(label$lambda(null));
    $receiver_0_1.unaryPlus_pdl1vz$(this.props.todo.title);
    $receiver_0.child_2usv9w$($receiver_0_1.create());
    var $receiver_0_2 = new RDOMBuilder_init(button$lambda(null, null, null, 'destroy'));
    set_onClickFunction($receiver_0_2.attrs, TodoItem$render$lambda$lambda$lambda$lambda_1(this));
    $receiver_0.child_2usv9w$($receiver_0_2.create());
    $receiver.child_2usv9w$($receiver_0.create());
  };
  function TodoItem$Props(todo, removeTodo, updateTodo) {
    this.todo = todo;
    this.removeTodo = removeTodo;
    this.updateTodo = updateTodo;
  }
  TodoItem$Props.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Props',
    interfaces: []
  };
  TodoItem.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TodoItem',
    interfaces: [RComponent]
  };
  function todoItem$lambda(closure$todo, closure$removeTodo, closure$updateTodo) {
    return function ($receiver) {
      $receiver.attrs.todo = closure$todo;
      $receiver.attrs.removeTodo = closure$removeTodo;
      $receiver.attrs.updateTodo = closure$updateTodo;
      return Unit;
    };
  }
  function todoItem($receiver, todo, removeTodo, updateTodo) {
    return $receiver.child_bzgiuu$(getKClass(TodoItem), todoItem$lambda(todo, removeTodo, updateTodo));
  }
  function main$lambda($receiver) {
    app($receiver);
    return Unit;
  }
  function main(args) {
    requireAll(require.context('src', true, /\.css$/));
    render(document.getElementById('root'), void 0, main$lambda);
  }
  var IMG_init = $module$kotlin_react_dom.$$importsForInline$$['kotlinx-html-js'].kotlinx.html.IMG;
  function img$lambda(closure$alt, closure$src, closure$classes) {
    return function (it) {
      return new IMG_init(attributesMapOf_0(['alt', closure$alt, 'src', closure$src, 'class', closure$classes]), it);
    };
  }
  function div$lambda_0(closure$classes) {
    return function (it) {
      return new DIV_init(attributesMapOf('class', closure$classes), it);
    };
  }
  function logo($receiver, height) {
    if (height === void 0)
      height = 100;
    var $receiver_0 = new RDOMBuilder_init(div$lambda_0('Logo'));
    get_jsStyle($receiver_0.attrs).height = height;
    var $receiver_0_0 = new RDOMBuilder_init(img$lambda('React logo.logo', $module$src_logo_bracelet_svg, 'Logo-react'));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    var $receiver_0_1 = new RDOMBuilder_init(img$lambda('Kotlin logo.logo', $module$src_logo_charmander_svg, 'Logo-kotlin'));
    $receiver_0.child_2usv9w$($receiver_0_1.create());
    $receiver.child_2usv9w$($receiver_0.create());
  }
  function logoSanta($receiver, height) {
    if (height === void 0)
      height = 100;
    var $receiver_0 = new RDOMBuilder_init(div$lambda_0(null));
    get_jsStyle($receiver_0.attrs).height = height;
    var $receiver_0_0 = new RDOMBuilder_init(img$lambda('Santa Claus.logo', $module$src_logo_santa_claus_svg, 'Logo-santa'));
    $receiver_0.child_2usv9w$($receiver_0_0.create());
    $receiver.child_2usv9w$($receiver_0.create());
  }
  function Todo(id, title, completed) {
    if (id === void 0)
      id = (new Date()).getTime();
    if (title === void 0)
      title = '';
    if (completed === void 0)
      completed = false;
    this.id = id;
    this.title = title;
    this.completed = completed;
  }
  Todo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Todo',
    interfaces: []
  };
  Todo.prototype.component1 = function () {
    return this.id;
  };
  Todo.prototype.component2 = function () {
    return this.title;
  };
  Todo.prototype.component3 = function () {
    return this.completed;
  };
  Todo.prototype.copy_1938w9$ = function (id, title, completed) {
    return new Todo(id === void 0 ? this.id : id, title === void 0 ? this.title : title, completed === void 0 ? this.completed : completed);
  };
  Todo.prototype.toString = function () {
    return 'Todo(id=' + Kotlin.toString(this.id) + (', title=' + Kotlin.toString(this.title)) + (', completed=' + Kotlin.toString(this.completed)) + ')';
  };
  Todo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.title) | 0;
    result = result * 31 + Kotlin.hashCode(this.completed) | 0;
    return result;
  };
  Todo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.id, other.id) && Kotlin.equals(this.title, other.title) && Kotlin.equals(this.completed, other.completed)))));
  };
  function TickerProps() {
  }
  TickerProps.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TickerProps',
    interfaces: []
  };
  function TickerState() {
  }
  TickerState.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TickerState',
    interfaces: []
  };
  function Ticker(props) {
    RComponent_init_0(props, this);
    this.timerID = null;
  }
  Ticker.prototype.init_65a95q$ = function ($receiver, props) {
    $receiver.secondsElapsed = props.startFrom;
  };
  function Ticker$componentDidMount$lambda$lambda($receiver) {
    $receiver.secondsElapsed = $receiver.secondsElapsed + 1 | 0;
    return Unit;
  }
  function Ticker$componentDidMount$lambda(this$Ticker) {
    return function () {
      setState(this$Ticker, Ticker$componentDidMount$lambda$lambda);
      return Unit;
    };
  }
  Ticker.prototype.componentDidMount = function () {
    this.timerID = window.setInterval(Ticker$componentDidMount$lambda(this), 1000);
  };
  Ticker.prototype.componentWillUnmount = function () {
    window.clearInterval(ensureNotNull(this.timerID));
  };
  Ticker.prototype.render_ss14n$ = function ($receiver) {
    $receiver.unaryPlus_pdl1vz$('This app has been running for ' + this.state.secondsElapsed + ' seconds.');
  };
  Ticker.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Ticker',
    interfaces: [RComponent]
  };
  function ticker$lambda(closure$startFrom) {
    return function ($receiver) {
      $receiver.attrs.startFrom = closure$startFrom;
      return Unit;
    };
  }
  function ticker($receiver, startFrom) {
    if (startFrom === void 0)
      startFrom = 0;
    return $receiver.child_bzgiuu$(getKClass(Ticker), ticker$lambda(startFrom));
  }
  function get_value($receiver) {
    var tmp$;
    return typeof (tmp$ = $receiver.currentTarget.value) === 'string' ? tmp$ : throwCCE();
  }
  var enUSLanguage;
  function translate($receiver) {
    var tmp$;
    return (tmp$ = enUSLanguage.get_11rb$($receiver)) != null ? tmp$ : '***' + $receiver;
  }
  $$importsForInline$$['kotlin-react-dom'] = $module$kotlin_react_dom;
  App.State = App$State;
  var package$app = _.app || (_.app = {});
  package$app.App = App;
  package$app.app_ss14n$ = app;
  HeaderInput.Props = HeaderInput$Props;
  HeaderInput.State = HeaderInput$State;
  package$app.HeaderInput = HeaderInput;
  package$app.headerInput_y7782z$ = headerInput;
  TodoList.Props = TodoList$Props;
  package$app.TodoList = TodoList;
  package$app.todoList_483zpl$ = todoList;
  TodoItem.Props = TodoItem$Props;
  package$app.TodoItem = TodoItem;
  package$app.todoItem_r2dria$ = todoItem;
  var package$index = _.index || (_.index = {});
  package$index.main_kand9s$ = main;
  var package$logo = _.logo || (_.logo = {});
  package$logo.logo_e0iee1$ = logo;
  package$logo.logoSanta_e0iee1$ = logoSanta;
  var package$model = _.model || (_.model = {});
  package$model.Todo = Todo;
  var package$ticker = _.ticker || (_.ticker = {});
  package$ticker.TickerProps = TickerProps;
  package$ticker.TickerState = TickerState;
  package$ticker.Ticker = Ticker;
  package$ticker.ticker_e0iee1$ = ticker;
  var package$util = _.util || (_.util = {});
  package$util.get_value_g0pdir$ = get_value;
  package$util.translate_pdl1vz$ = translate;
  enUSLanguage = mapOf([to('Hello Santa', 'Hello Santa 2'), to('What needs to be done?', 'Ki sa ki bezwen f\xE8t?'), to('todos', 'tout')]);
  main([]);
  Kotlin.defineModule('kotlinApp', _);
  return _;
}(module.exports, require('kotlin'), require('kotlin-react'), require('kotlin-react-dom'), require('kotlinx-html-js'), require('kotlin-extensions'), require('src/logo/bracelet.svg'), require('src/logo/charmander.svg'), require('src/logo/santa-claus.svg')));

//# sourceMappingURL=kotlinApp.js.map
